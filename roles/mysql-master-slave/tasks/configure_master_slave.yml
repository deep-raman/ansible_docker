---
- name: Sleep for 30 seconds
  wait_for:
    timeout: 30
  delegate_to: localhost

- name: Get master node ip
  shell: "docker network inspect {{ network_name }} | jq -r '.[].Containers[].IPv4Address' | cut -d\"/\" -f1 | sort | head -n 1"
  register: ip

- set_fact:
    master_ip: "{{ ip.stdout }}"
    
- debug: var=master_ip

- name: Get slave node ip
  shell: "docker network inspect {{ network_name }} | jq -r '.[].Containers[].IPv4Address' | cut -d\"/\" -f1 | sort | sed '1d'"
  register: ip

- set_fact:
    slave_ip: "{{ ip.stdout }}"
    
- debug: var=slave_ip

- name: Grant replication to replica user
  mysql_user:
    name: "{{ replication_user }}"
    password: "{{ replication_pass }}"
    priv: "*.*:REPLICATION CLIENT"
    host: "%"
    state: present
    login_host: "{{ master_ip }}"
    login_user: "root"
    login_password: "{{ mysql_root_pass }}"
    
- name: Get mysql master binlog
  shell: "docker exec {{ master_name }} sh -c 'export MYSQL_PWD={{ mysql_root_pass }}; mysql -u root --batch -N -e \"SHOW MASTER STATUS\"' | awk '{print $1 }'"
  register: output

- set_fact: 
    master_binlog: "{{ output.stdout }}"

#- debug: var=master_binlog

- name: Get mysql master log position
  shell: "docker exec {{ master_name }} sh -c 'export MYSQL_PWD={{ mysql_root_pass }}; mysql -u root --batch -N -e \"SHOW MASTER STATUS\"' | awk '{print $2 }'"
  register: output

- set_fact: 
    master_logpos: "{{ output.stdout }}"

#- debug: var=master_logpos

- name: Copy shell script
  template:
    src: mysql_replication.sh.j2
    dest: /tmp/mysql_replication.sh
    mode: 0755

- name: run shell script
  shell: /tmp/mysql_replication.sh
  
- name: Check slave status
  shell: "docker exec {{ slave_name }}{{ item }} sh -c \"export MYSQL_PWD={{ mysql_root_pass }}; mysql -u root --batch -N -e 'select * from docker.master_slave;show slave status'\""
  register: query_result
  with_sequence: count="{{ slave_instances }}"
  tags: status

- debug: var=query_result
  tags: status

  
